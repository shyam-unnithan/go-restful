// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/shyam-unnithan/go-restful/domain (interfaces: CustomerStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/shyam-unnithan/go-restful/domain"
	reflect "reflect"
)

// MockCustomerStore is a mock of CustomerStore interface
type MockCustomerStore struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerStoreMockRecorder
}

// MockCustomerStoreMockRecorder is the mock recorder for MockCustomerStore
type MockCustomerStoreMockRecorder struct {
	mock *MockCustomerStore
}

// NewMockCustomerStore creates a new mock instance
func NewMockCustomerStore(ctrl *gomock.Controller) *MockCustomerStore {
	mock := &MockCustomerStore{ctrl: ctrl}
	mock.recorder = &MockCustomerStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCustomerStore) EXPECT() *MockCustomerStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockCustomerStore) Create(arg0 domain.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockCustomerStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerStore)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockCustomerStore) Delete(arg0 domain.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCustomerStoreMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCustomerStore)(nil).Delete), arg0)
}

// GetAll mocks base method
func (m *MockCustomerStore) GetAll() map[string]domain.Customer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(map[string]domain.Customer)
	return ret0
}

// GetAll indicates an expected call of GetAll
func (mr *MockCustomerStoreMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCustomerStore)(nil).GetAll))
}

// GetByID mocks base method
func (m *MockCustomerStore) GetByID(arg0 string) (domain.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(domain.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockCustomerStoreMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCustomerStore)(nil).GetByID), arg0)
}

// Update mocks base method
func (m *MockCustomerStore) Update(arg0 domain.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockCustomerStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCustomerStore)(nil).Update), arg0)
}
